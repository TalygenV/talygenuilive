{"version":3,"sources":["webpack:///./src/views/CRM/Deal/ManageDealCustomLayout.vue?9221","webpack:///src/views/CRM/Deal/ManageDealCustomLayout.vue","webpack:///./src/views/CRM/Deal/ManageDealCustomLayout.vue?5ce0","webpack:///./src/views/CRM/Deal/ManageDealCustomLayout.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","isLoading","staticClass","_v","_s","$t","ref","buttons","FormSchema","on","saveForm","$event","showaddindustryModal","UpdateSelectJson","_e","showaddroletitleModal","showaddleadsourceModal","staticRenderFns","components","modaladdindustry","modaladdroletitle","modaladdleadsource","data","dealId","userid","companyId","username","dateFormat","type","class","text","onclick","onClick","isVisible","created","methods","getForm","ths","DataService","group","field","label","value","obj","stateObj","mode","format","onSearchh","vm","searchSelectDataa","ShowSearchDataa","appendingUrl","search","selctedValue","response","name","onChangeEventForFields","id","y","GetDropDownData","url","options","openaddIndustrypopup","openaddRoleTitlepopup","openaddLeadSourcepopup","json","CustomFieldArray","x","moduleCode","subModuleCode","onCancel","component"],"mappings":"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","file":"js/CRMManageDeal.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('loader',{attrs:{\"is-visible\":_vm.isLoading}}),_c('section',{staticClass:\"main-content\"},[_c('div',{attrs:{\"id\":\"divMaindealData\"}},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-md-12 padding-t_8\"},[_c('div',{staticClass:\"theme-primary partition-full\"},[_c('span',{staticClass:\"p-name text-white\"},[_vm._v(_vm._s(_vm.$t('ManageDeal')))])])])]),_c('div',{staticClass:\"border p-3\"},[_c('Form',{ref:\"DealForm\"},[_c('dynamic-form',{ref:\"ManageDealForm\",attrs:{\"buttons\":_vm.buttons,\"schema\":_vm.FormSchema},on:{\"OnSubmit\":_vm.saveForm}})],1),(_vm.showaddindustryModal)?_c('modaladdindustry',{attrs:{\"callFrom\":\"deal\"},on:{\"close\":function($event){_vm.showaddindustryModal = false},\"updatedata\":_vm.UpdateSelectJson}}):_vm._e(),(_vm.showaddroletitleModal)?_c('modaladdroletitle',{attrs:{\"callFrom\":\"deal\"},on:{\"close\":function($event){_vm.showaddroletitleModal = false},\"updatedata\":_vm.UpdateSelectJson}}):_vm._e(),(_vm.showaddleadsourceModal)?_c('modaladdleadsource',{attrs:{\"callFrom\":\"deal\"},on:{\"close\":function($event){_vm.showaddleadsourceModal = false},\"updatedata\":_vm.UpdateSelectJson}}):_vm._e()],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <loader :is-visible=\"isLoading\"></loader>\r\n        <section class=\"main-content\">\r\n            <div id=\"divMaindealData\" v-cloak>\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12 padding-t_8\">\r\n                        <div class=\"theme-primary partition-full\">\r\n                            <span class=\"p-name text-white\">{{ $t('ManageDeal') }}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"border p-3\">\r\n                    <Form ref=\"DealForm\">\r\n                        <dynamic-form ref=\"ManageDealForm\" :buttons=\"buttons\" :schema=\"FormSchema\"\r\n                            v-on:OnSubmit=\"saveForm\"></dynamic-form>\r\n                    </Form>\r\n                    <modaladdindustry v-if=\"showaddindustryModal\" callFrom=\"deal\" @close=\"showaddindustryModal = false\"\r\n                        @updatedata=\"UpdateSelectJson\"></modaladdindustry>\r\n                    <modaladdroletitle v-if=\"showaddroletitleModal\" callFrom=\"deal\" @close=\"showaddroletitleModal = false\"\r\n                        @updatedata=\"UpdateSelectJson\"></modaladdroletitle>\r\n                    <modaladdleadsource v-if=\"showaddleadsourceModal\" callFrom=\"deal\"\r\n                        @close=\"showaddleadsourceModal = false\" @updatedata=\"UpdateSelectJson\">\r\n                    </modaladdleadsource>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    </div>\r\n</template>\r\n<script>\r\nimport DataService from \"../../../services/DataService\";\r\nimport modaladdindustry from '../../../components/Common/Modal/modaladdindustry.vue'\r\nimport modaladdroletitle from '../../../components/Common/Modal/modaladdroletitle.vue'\r\nimport modaladdleadsource from '../../../components/Common/Modal/modaladdleadsource.vue'\r\nexport default {\r\n    components: {\r\n        modaladdindustry,\r\n        modaladdroletitle,\r\n        modaladdleadsource\r\n    },\r\n    data() {\r\n        return {\r\n            isLoading: false,\r\n            dealId: this.$route.params.id,\r\n            showaddindustryModal: false,\r\n            showaddroletitleModal: false,\r\n            showaddleadsourceModal: false,\r\n            userid: null,\r\n            companyId: null,\r\n            username: null,\r\n            dateFormat: null,\r\n            FormSchema: [],\r\n            buttons: [{\r\n                type: \"submit\",\r\n                class: \"btn btn-success\",\r\n                text: \"<i class='fa fa-save pr-2'></i>Save\",\r\n                onclick: this.saveForm\r\n            },\r\n            {\r\n                type: \"button\",\r\n                class: \"btn btn-danger\",\r\n                text: \"<i class='fa fa-close pr-2'></i>Cancel\",\r\n                onClick: this.onCancel,\r\n                isVisible: true,\r\n            },\r\n            ],\r\n        }\r\n    },\r\n    created: function () {\r\n        var vm = this;\r\n        this.userid = this.GetUserInfo.ID;\r\n        this.companyId = this.GetUserInfo.CompanyId;\r\n        this.username = this.GetUserInfo.Name;\r\n        this.dateFormat = this.GetUserInfo.DateFormat;\r\n        this.getForm(vm.dealId);\r\n    },\r\n    methods: {\r\n        getForm: function (id) {\r\n            var ths = this;\r\n            ths.isLoading = true;\r\n            var url = `recordId=${id}&moduleName=CRM&subModuleCode=CRM_DEALS&langCode=en`;\r\n            DataService.GetDynamicForm(url).then(function (response) {                \r\n                if (response != null && response.data != null) {\r\n                    ths.FormSchema = ths.$refs.ManageDealForm.ConvertCustomFieldIntoDynamicFormObj(response.data.data);\r\n                    ths.FormSchema.forEach((group, gi) => {\r\n                        group.Data.forEach(async (field, fi) => {\r\n                            if (field.name == 'industry_type_id') {\r\n                                field.config.showAddIcon = true;\r\n                                field.config.onAddButtonClick = ths.openaddIndustrypopup;\r\n                            }\r\n                            if (field.name == \"lead_source_id\") {\r\n                                field.config.showAddIcon = true;\r\n                                field.config.onAddButtonClick = ths.openaddLeadSourcepopup;\r\n                            }\r\n                            if (field.name == \"role_title_id\") {\r\n                                field.config.showAddIcon = true;\r\n                                field.config.onAddButtonClick = ths.openaddRoleTitlepopup;\r\n                            }\r\n                            if (field.name == 'deal_state' && field.value == '') {\r\n                                field.config.options = null;\r\n                            }\r\n                            if (field.name == \"deal_id\") {\r\n                                field.value = ths.dealId;\r\n                            }\r\n                            if (field.name == \"deal_owner_id\") {                                \r\n                                if (field.value == '') {\r\n                                    field.value = { label: ths.username, value: ths.userid }\r\n                                }\r\n                                else {\r\n                                    if (field.config.options != null) {\r\n                                        var obj = field.config.options.filter(x => x.value == field.value)[0];\r\n                                        field.value = { label: obj.name, value: obj.value }\r\n                                    } else {\r\n                                        field.value = { label: ths.username, value: ths.userid }\r\n                                    }\r\n                                }\r\n                                field.config.onSearchChange = ths.onSearchh;\r\n                                ths.onSearchh(null,field,\" \");\r\n                            }\r\n                            if (field.name == 'status_id' && field.value == '') {\r\n                                field.value = field.config.options.filter(x => x.name.toLowerCase() == 'active')[0].value;                               \r\n                            }\r\n                            if (field.name == 'deal_country' && field.value != '') {\r\n                                var stateObj = group.Data.filter(x => x.name == 'deal_state')[0];\r\n                                await ths.GetDropDownData('ACCOUNT_STATE', stateObj, field.value, 'EDIT');\r\n                            }\r\n                            if (field.name == 'closing_date' && field.value == '') {\r\n                                field.value = new Date();\r\n                                field.config = { mode: 'date', format: \"M/D/YYYY\" }\r\n                            }\r\n                            field.config.onChange = ths.onChangeEventForFields;\r\n                        });\r\n                    });\r\n                    ths.isLoading = false;\r\n                }\r\n            });\r\n        },\r\n        onSearchh: function (e, selctedValue, search) {            \r\n            var vm = this;\r\n            vm.searchSelectDataa(search, vm, selctedValue);\r\n        },\r\n        searchSelectDataa: function (search, ths, selctedValue) {\r\n            this.ShowSearchDataa(search, ths, selctedValue);\r\n        },\r\n        ShowSearchDataa: async function (search, ths, selctedValue) {            \r\n            var vm = this;\r\n            var appendingUrl = `id=&&moduleName=CRM&type=CRM_USERS&search=${search}&refId=`;\r\n            selctedValue.config.options = [];\r\n            if (typeof (selctedValue) == 'undefined') {\r\n                selctedValue = 0;\r\n            }\r\n            await DataService.getDDLData(appendingUrl).then(function (response) {\r\n                if (response.data) {\r\n                    vm.JsonObj = response.data;\r\n                    if (vm.JsonObj != null) {\r\n                        response.data.DATA.forEach((item) => {\r\n                            var obj = {\r\n                                value: item.value,\r\n                                name: item.name\r\n                            }\r\n                            selctedValue.config.options.push(obj);\r\n                        })\r\n                        vm.$refs.AccountForm.UpdateKeyValue();\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        onChangeEventForFields: function (x, y, z) {\r\n            let ths = this;\r\n            var vm = this;\r\n            if (y.name == \"deal_country\") {\r\n                ths.FormSchema.forEach((group, gi) => {\r\n                    group.Data.forEach(async (field, fi) => {\r\n                        if (field.name == \"deal_state\") {\r\n                            let id = y.value;\r\n                            await vm.GetDropDownData('ACCOUNT_STATE', field, id, null);\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n        },\r\n        GetDropDownData: async function (type, field, id, action) {\r\n            var vm = this;\r\n            var url = `id=&moduleName=CRM&type=${type}&refId=${id}`;\r\n            await DataService.getDDLData(url + \"&search=\").then(response => {\r\n                if (response.data.DATA != undefined) {\r\n                    var options = response.data.DATA;\r\n                    field.config.options = [];\r\n                    if (action != 'EDIT') {\r\n                        field.value = '';\r\n                    }\r\n                    if (type == 'ACCOUNT_STATE') {\r\n                        options.forEach((item) => {\r\n                            field.config.options.push({\r\n                                value: item.value,\r\n                                name: item.name\r\n                            })\r\n                        })\r\n                    }\r\n                    vm.$refs.ManageDealForm.UpdateKeyValue();\r\n                }\r\n            });\r\n        },\r\n        openaddIndustrypopup: function () {\r\n            var vm = this;\r\n            vm.showaddindustryModal = true;\r\n        },\r\n        openaddRoleTitlepopup: function (item) {\r\n            this.RoleTitleItemObject = item;\r\n            this.showaddroletitleModal = true;\r\n        },\r\n        openaddLeadSourcepopup: function (item) {\r\n            this.LeadSourceItemObject = item;\r\n            this.showaddleadsourceModal = true;\r\n        },\r\n        UpdateSelectJson: function (name, json) {\r\n            let ths = this;\r\n            ths.FormSchema.forEach((group, gi) => {\r\n                group.Data.forEach((field, fi) => {\r\n                    if (field.name == name) {\r\n                        if (json != null) {\r\n                            field.config.options = [];\r\n                            json.forEach(x => {\r\n                                field.config.options.push({ name: x.name, value: x.value });\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            ths.$refs.ManageDealForm.UpdateKeyValue();\r\n        },\r\n        saveForm() {\r\n            var ths = this;\r\n            ths.$refs.DealForm.validate().then(result => {\r\n                if (result) {\r\n                    ths.isLoading = true;\r\n                    var CustomFieldArray = ths.$refs.ManageDealForm.ConvertDynamicFormObjToCustomFieldObj(ths.FormSchema);\r\n                    CustomFieldArray.forEach((x) => {\r\n                        if (x.field_name == \"account_id\") {\r\n                            if (!ths.isBlank(x.field_value)) {\r\n                                x.field_value = x.field_value.value;\r\n                            }\r\n                        }\r\n                        if (x.field_name == \"deal_owner_id\") {\r\n                            if (!ths.isBlank(x.field_value)) {\r\n                                x.field_value = x.field_value.value;\r\n                            }\r\n                        }\r\n                    })\r\n                    var obj = {\r\n                        data: CustomFieldArray,\r\n                        moduleCode: \"CRM\",\r\n                        subModuleCode: \"CRM_DEALS\"\r\n                    }\r\n                    DataService.SaveDynamicForm(JSON.stringify(obj)).then(function (response) {\r\n                        if (response != null && response.data != null && response.data[0].Status == \"Success\") {\r\n                            if (ths.dealId > 0) {\r\n                                ths.ShowAlert(ths.$t('UpdatedSuccess', [ths.$t('Deal')]), \"success\", true, ths.$t(\"Alert\"));\r\n                                ths.$router.push({ name: 'CRMDeal' });\r\n                            }\r\n                            else {\r\n                                ths.ShowAlert(ths.$t('AddedSuccess', [ths.$t('Deal')]), \"success\", true, ths.$t(\"Alert\"));\r\n                                ths.$router.push({ name: 'CRMDeal' });\r\n                            }\r\n                        }\r\n                    })\r\n                    ths.isLoading = false;\r\n                }\r\n            })\r\n        },\r\n        onCancel: function () {\r\n            var vm = this;\r\n            vm.$router.push({ name: 'CRMDeal' });\r\n\r\n        },\r\n    }\r\n}\r\n</script>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ManageDealCustomLayout.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ManageDealCustomLayout.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ManageDealCustomLayout.vue?vue&type=template&id=efdef7fc&\"\nimport script from \"./ManageDealCustomLayout.vue?vue&type=script&lang=js&\"\nexport * from \"./ManageDealCustomLayout.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}